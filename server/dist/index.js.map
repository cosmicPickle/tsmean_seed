{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./server/src/App.ts","webpack:///./server/src/configuration/db/mongo.ts","webpack:///./server/src/configuration/errors/errorsConfig.ts","webpack:///./server/src/configuration/middlewares/middlewaresConfig.ts","webpack:///./server/src/configuration/routes/routesConfig.ts","webpack:///./server/src/core/errors/AppAuthorizationError.ts","webpack:///./server/src/core/errors/AppError.ts","webpack:///./server/src/core/errors/AppGeneralError.ts","webpack:///./server/src/core/errors/AppInvalidRouteError.ts","webpack:///./server/src/core/errors/AppMongoError.ts","webpack:///./server/src/core/errors/AppRouteValidationError.ts","webpack:///./server/src/core/errors/AppUnknownGroupError.ts","webpack:///./server/src/core/errors/AppUnknownUserError.ts","webpack:///./server/src/core/lib/AppLogger.ts","webpack:///./server/src/core/lib/AppMongoDriver.ts","webpack:///./server/src/core/middlewares/AppLoggerMiddleware.ts","webpack:///./server/src/core/middlewares/validation/request/UserRouteValidatorMiddleware.ts","webpack:///./server/src/core/models/resource/base/BaseMongoModel.ts","webpack:///./server/src/core/models/resource/base/BaseValidationSchema.ts","webpack:///./server/src/core/models/resource/user/UserMongoModel.ts","webpack:///./server/src/core/models/resource/user/UserValidationSchema.ts","webpack:///./server/src/core/routing/AppRoute.ts","webpack:///./server/src/core/routing/AppRoutesRegistry.ts","webpack:///./server/src/core/routing/DefaultRoute.ts","webpack:///./server/src/core/routing/GroupRoute.ts","webpack:///./server/src/core/routing/UserRoute.ts","webpack:///./server/src/index.ts","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"joi\"","webpack:///external \"mongodb\"","webpack:///external \"winston\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as express from 'express'\nimport AppRoutesRegistry from './core/routing/AppRoutesRegistry';\nimport middlewaresConfig from './configuration/middlewares/middlewaresConfig';\n\nexport class App {\n    public express = express();\n    constructor () {}\n\n    init() {\n        this.mountGlobalMiddlewares();\n        this.mountRoutes();\n\n        return this;\n    } \n\n    private mountGlobalMiddlewares() {\n        const routeMiddlewares = middlewaresConfig._;\n        routeMiddlewares && this.express.use(routeMiddlewares);\n    }\n    private mountRoutes (): void {\n        const routesRegistry  = new AppRoutesRegistry(express.Router());\n        this.express.use('/', routesRegistry.getRouter());\n    }\n}\n\n\nexport default new App().init().express","export const mongoConfig = {\n    host: 'ds223019.mlab.com:23019/test_seed',\n    user: 'cosmicSeed',\n    password: 'csmsd123',\n    db: 'test_seed'\n}\n\nconst connect: string = `mongodb://${mongoConfig.user}:${mongoConfig.password}@${mongoConfig.host}`;\n\nexport { connect };","import { AppGeneralError } from './../../core/errors/AppGeneralError';\nimport { AppInvalidRouteError } from './../../core/errors/AppInvalidRouteError';\nimport { AppAuthorizationError } from './../../core/errors/AppAuthorizationError';\nimport { AppRouteValidationError } from './../../core/errors/AppRouteValidationError';\nimport { AppMongoError } from './../../core/errors/AppMongoError';\nimport { AppUnknownUserError } from './../../core/errors/AppUnknownUserError';\nimport { AppUnknownGroupError } from './../../core/errors/AppUnknownGroupError';\n\nexport let appGeneralError = new AppGeneralError(1000);\nexport let appInvalidRouteError = new AppInvalidRouteError(1001);\nexport let appAuthorizationError = new AppAuthorizationError(1002);\nexport let appRouteValidationError = new AppRouteValidationError(1003);\nexport let appMongoError = new AppMongoError(1004);\nexport let appUnknownUserError = new AppUnknownUserError(1005);\nexport let appUnknownGroupError = new AppUnknownGroupError(1006);","import * as bodyParser from 'body-parser';\nimport { AppMiddlewares } from './../../core/middlewares/AppMiddleware';\nimport { appLoggerMiddleware } from './../../core/middlewares/AppLoggerMiddleware';\nimport { appAuthenticateMiddleware } from './../../core/middlewares/AppAuthenticateMiddleware';\nimport { userRouteValidatorMiddleware } from './../../core/middlewares/validation/request/UserRouteValidatorMiddleware';\n\nexport const middlewares: AppMiddlewares= {\n    _: [\n        bodyParser.urlencoded({ extended: true }),\n        bodyParser.json({ strict: false}),\n        appLoggerMiddleware.log\n    ],\n    '/user/:name?': {\n        get: [\n            userRouteValidatorMiddleware.get,\n            //appAuthenticateMiddleware.check\n        ],\n        post: [\n            userRouteValidatorMiddleware.post\n        ]\n    }\n};\n\nexport default middlewares;\n","import { userRoute } from './../../core/routing/UserRoute';\nimport { groupRoute } from './../../core/routing/GroupRoute';\nimport { defaultRoute } from './../../core/routing/DefaultRoute';\nimport AppRoute from './../../core/routing/AppRoute';\n\nexport const routesConfig: AppRoute[] = [\n    defaultRoute,\n    userRoute,\n    groupRoute\n];\n\nexport default routesConfig;","import { AppError } from './AppError';\n\nexport class AppAuthorizationError extends AppError {\n    protected message = \"not_authorized\";\n}","export class AppError {\n    protected message: string\n    protected payload: any\n\n    constructor(protected code: number) {}\n    \n    get() {\n        return { \n            code: this.code,\n            message: this.message,\n            payload: this.payload\n        }\n    }    \n} \n\nexport default AppError;","import { AppError } from './AppError';\n\nexport class AppGeneralError extends AppError {\n    protected message = \"unexpected_error\";\n}","import { AppError } from './AppError';\n\nexport class AppInvalidRouteError extends AppError {\n    \n    protected message = \"invalid_route\";\n}","import { AppError } from './AppError';\n\ninterface IMongoError extends Error {\n    errors: Object \n}\n\nexport class AppMongoError extends AppError {\n    \n    protected code = 1001;\n    protected message = \"\";\n    \n    parse<T extends Error|IMongoError>(err: T): AppMongoError  {\n        if((<IMongoError>err).errors) {\n            this.message = \"mongoose_validation_error\";\n            this.payload = {\n                invalid: Object.keys((<IMongoError>err).errors).map((key) => {\n                    const e = (<IMongoError>err).errors[key];\n                    return {\n                        kind: e.kind,\n                        path: e.path,\n                        message: e.message,\n                        value: e.value\n                    }\n                })\n            }\n        } else if (err.message.indexOf('duplicate key error') !== -1) {\n            this.message = \"mongoose_duplicate_key_error\"; \n        } else {\n            this.message = \"mongoose_error\"\n\n            if(process.env.NODE_ENV == 'development') {\n                this.payload = {\n                    debug: err.message\n                }\n            }\n        }\n        return this;\n    }\n}","import { AppError } from \"./AppError\";\nimport * as Joi from 'joi';\nexport class AppRouteValidationError extends AppError {\n    protected message = \"invalid_request\"\n\n    parse(error: Joi.ValidationError): AppRouteValidationError {\n\n        this.payload = {\n            errors: [],\n            invalid: error._object\n        }\n        console.log(error);\n        error.details.forEach((e) => {\n            (this.payload as any).errors.push({\n                path: e.path,\n                type: e.type,\n                context: e.context\n            })\n        })\n        return this;\n    }\n}","import { AppError } from './AppError';\n\nexport class AppUnknownGroupError extends AppError {\n    \n    protected code = 1005;\n    protected message = \"Unknown group\";\n}","import { AppError } from './AppError';\n\nexport class AppUnknownUserError extends AppError {\n    protected message = \"unknown_user\";\n}\n\n","\nimport * as winston from 'winston';\n\nexport class AppLogger {\n    private __winston;\n    private __transportsDev: winston.TransportInstance[] = [\n        new winston.transports.Console({\n            level: 'debug',\n            colorize: true,\n            handleExceptions: true,\n            humanReadableUnhandledException: true\n        }),\n        new winston.transports.File({\n            filename: './logs/app.log',\n            maxsize: 1024*1024,\n            level: 'error'\n        })\n    ];\n    private __transportsProd: winston.TransportInstance[] = [\n        new winston.transports.File({\n            filename: './logs/app.log',\n            maxsize: 1024*1024,\n            level: 'info',\n            handleExceptions: true,\n            humanReadableUnhandledException: true\n        })\n    ];\n\n    private __loggerOptions: winston.LoggerOptions = {\n        exitOnError: false\n    }\n\n    constructor() {\n        \n        if(process.env.NODE_ENV === 'development')\n            this.__loggerOptions.transports = this.__transportsDev;\n        else \n            this.__loggerOptions.transports = this.__transportsProd;\n\n        this.__winston = new winston.Logger(this.__loggerOptions);\n    }\n    /**\n     * logger\n     */\n    public logger() {\n        return this.__winston;\n    }\n}\n\nexport let logger = new AppLogger().logger();","\nimport * as mongodb from 'mongodb'\nimport { connect, mongoConfig } from './../../configuration/db/mongo';\nimport { logger } from './AppLogger'\n\nclass AppMongoDriver {\n    protected _client: mongodb.MongoClient = null;\n    protected _db: mongodb.Db;\n    async connect() {\n        logger.info(`Connecting to mongodb`)\n        this._client = await mongodb.MongoClient.connect(connect); \n        this._db = this._client.db(mongoConfig.db);\n    }\n    db() {\n        return this._db;\n    }\n}\n\nexport let mongo = new AppMongoDriver();","import { AppMiddlewareFunction } from \"../middlewares/AppMiddleware\";\nimport { logger } from \"../lib/AppLogger\";\n\nexport class AppLoggerMiddleware {\n    log: AppMiddlewareFunction  = (req, res, next)  => {\n        logger.debug(`Request ${req.method.toUpperCase()} ${req.path}: ${JSON.stringify(req.params)}`);\n        next();\n    }\n}\n\nexport let appLoggerMiddleware = new AppLoggerMiddleware()","import * as Joi from 'joi';\nimport { Request, Response, NextFunction } from 'express';\nimport { AppMiddlewareFunction } from './../../AppMiddleware';\nimport { userGetQuerySchema, userPostBodySchema } from './../../../models/resource/user/UserValidationSchema';\nimport { appRouteValidationError } from './../../../../configuration/errors/errorsConfig';\n\nexport class UserRouteValidatorMiddleware {\n    get: AppMiddlewareFunction = async (req: Request, res: Response, next: NextFunction) => { \n        try {\n            await userGetQuerySchema.validate(req.query);\n            next();\n        } catch(e) {\n            res.json(appRouteValidationError.parse(e as Joi.ValidationError).get());\n        }\n    }\n    post: AppMiddlewareFunction = async (req: Request, res: Response, next: NextFunction) => { \n        try {\n            await userPostBodySchema.validate(req.body);\n            next();\n        } catch(e) {\n            console.log(e)\n            res.json(appRouteValidationError.parse(e as Joi.ValidationError).get())\n        }\n        \n    }\n}\n\nexport let userRouteValidatorMiddleware = new UserRouteValidatorMiddleware();","import { mongo } from './../../../lib/AppMongoDriver';\nimport { Collection, Db } from 'mongodb';\n\nexport class BaseMongoModel<T> {\n    name: string;\n    collection: Collection<T>;\n\n    constructor() { \n        \n    }\n    get(): Collection<T> {\n        if(this.collection)\n            return this.collection;\n\n        \n        if(!this.name) {\n            throw new Error(`Can't make collection '${this.constructor.prototype}': 'name' not set`);\n        }\n\n        this.collection = mongo.db().collection(this.name);\n        return this.collection;\n    }\n        \n}","\nimport * as Joi from 'joi';\n\nexport namespace SchemaHelpers {\n    \n    export const lt = {\n        lt: Joi.number().integer().min(Joi.ref('gt'))\n    }\n\n    export const gt = {\n        gt: Joi.number().integer()\n    }\n\n    export const range = {\n        gt: Joi.number().integer(),\n        lt: Joi.number().integer().min(Joi.ref('gt'))\n    }\n\n    export const $in = {\n        in: Joi.array()\n    }\n}\n\nexport class BaseValidationSchema {\n    validate(obj): Promise<Boolean> {\n        return new Promise<Boolean>((resolve, reject) => {\n            let _schema = Joi.object();\n            let keys: Joi.SchemaMap = {};\n            \n            Object.keys(this).forEach((k) => {\n                return keys[k] = this[k];\n            })\n\n\n            if(!keys) {\n                resolve(true);\n                return;\n            }\n\n            try {\n                _schema = (_schema as Joi.ObjectSchema).keys(keys);\n\n                const { error, value } = Joi.validate(obj, _schema);\n                \n                if(error)\n                    throw error;\n\n                resolve(true);\n            } catch (e) {\n                throw e;\n            }\n        })\n    }\n}\n\nexport class AppBaseQuerySchema extends BaseValidationSchema {\n    sort: Joi.StringSchema = Joi.string().regex(/^(\\-|[a-zA-Z0-9\\_])/);\n    page: Joi.NumberSchema = Joi.number().min(0);\n}\n\nexport class AppBaseBodySchema extends BaseValidationSchema {\n    \n}","import { BaseMongoModel } from './../base/BaseMongoModel';\nimport { IUserMongoModel } from './IUserMongoModel';\nexport class UserMongoModel extends BaseMongoModel<IUserMongoModel> {\n    name = 'users';\n}\n\nexport let User = new UserMongoModel().get();","import { AppBaseQuerySchema, SchemaHelpers, AppBaseBodySchema } from './../base/BaseValidationSchema';\nimport * as Joi from 'joi';\n\nexport class UserGetQuerySchema extends AppBaseQuerySchema {\n    sort = Joi.string().valid('age', '-age');\n    country = Joi.string().min(2).max(2);\n    age = Joi.object().keys(SchemaHelpers.range)\n}\n\nexport class UserPostBodySchema extends AppBaseBodySchema {\n    username = Joi.string().required().valid('cosmic22', 'cosmic33');\n    password = Joi.string().required();\n    age = Joi.number().required();\n    country = Joi.string().min(2).max(2).required();\n    group = Joi.string().required();\n    allowedServices = Joi.array().items(Joi.object().optional().keys({\n        method: Joi.string().required(),\n        path: Joi.string().required()\n    }));\n    allowedRoutes = Joi.array().items(Joi.string()).optional();\n}\n\nexport const userGetQuerySchema = new UserGetQuerySchema();\nexport const userPostBodySchema = new UserPostBodySchema();","import { appInvalidRouteError } from './../../configuration/errors/errorsConfig';\nimport { Request, Response, Router } from 'express';\nimport { AppMiddlewareMethod} from './../middlewares/AppMiddleware'\nimport middlewaresConfig from './../../configuration/middlewares/middlewaresConfig';\nimport * as base from '../models/resource/base/BaseValidationSchemaTypes';\nexport interface IAppRoute {\n    get: <T extends base.AppBaseRequest<any, any>>(req: T, res: Response) => void\n    post: <T extends base.AppBaseRequest<any, any>>(req: T, res: Response) => void\n    put: <T extends base.AppBaseRequest<any, any>>(req: T, res: Response) => void\n    delete: <T extends base.AppBaseRequest<any, any>>(req: T, res: Response) => void\n    mount: (router: Router) => void\n}\n\nexport class AppRoute implements IAppRoute {\n    protected path: string;\n    protected middlewares: AppMiddlewareMethod;\n\n    constructor() { }\n\n    get<T extends base.AppBaseRequest<any, any>>(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    post<T extends base.AppBaseRequest<any, any>>(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    put<T extends base.AppBaseRequest<any, any>>(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    delete<T extends base.AppBaseRequest<any, any>>(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    mountMiddlewares(router: Router) {\n        const routeMiddlewares = <AppMiddlewareMethod>middlewaresConfig[this.path];\n        if(routeMiddlewares === undefined)\n            return;\n\n        routeMiddlewares._ && router.use(this.path, routeMiddlewares._);\n        routeMiddlewares.get && router.get(this.path, routeMiddlewares.get);\n        routeMiddlewares.post && router.post(this.path, routeMiddlewares.post);\n        routeMiddlewares.put && router.put(this.path, routeMiddlewares.put);\n        routeMiddlewares.delete && router.delete(this.path, routeMiddlewares.delete);\n    }\n    mount(router: Router) {\n        this.mountMiddlewares(router);\n        router.get(this.path, this.get);\n        router.post(this.path, this.post);\n        router.put(this.path, this.put);\n        router.delete(this.path, this.delete);\n    }\n}\n\nexport default AppRoute;","import AppRoute from './AppRoute';\nimport routesConfig from './../../configuration/routes/routesConfig';\n\nexport class AppRoutesRegistry {\n\n    private routes: AppRoute[] = routesConfig;\n\n    constructor(public router: any) {\n        this.routes.forEach((route) => {\n            route.mount(this.router);\n        })\n    }\n\n    getRouter() {\n        return this.router;\n    }\n}\n\nexport default AppRoutesRegistry;","import AppRoute from './AppRoute';\n\nexport class DefaultRoute extends AppRoute {\n    protected path = '/'\n}\n\nexport let defaultRoute = new DefaultRoute();","import { Request, Response } from 'express';\nimport AppRoute from './AppRoute';\nimport { appMongoError, appUnknownUserError } from './../../configuration/errors/errorsConfig';\nimport { logger } from '../lib/AppLogger';\n\n\nexport class GroupRoute extends AppRoute {\n    protected path = '/group/:id?'\n\n    async post(req: Request, res: Response) {\n        res.json({placeholder: true})\n        // try {\n        //     let group = new Group();\n        //     group.name = req.body.name;\n        //     group.allowedRoutes = req.body.allowedRoutes;\n        //     group.allowedServices = req.body.allowedServices;\n            \n        //     await group.save();\n            \n        //     return res.json({\n        //         success: 'Group Saved',\n        //         status: 'ok'\n        //     })\n        // } catch(err) {\n        //     return res.json(appMongoError.parse(err).get());\n        // }\n        \n    }\n}\n\nexport let groupRoute = new GroupRoute();","import { Response, Request } from \"express\";\n\nimport { IAppRoute, AppRoute } from \"./AppRoute\";\nimport { appUnknownUserError, appMongoError, appUnknownGroupError, appRouteValidationError, appGeneralError } from \"./../../configuration/errors/errorsConfig\";\n\nimport { UserGetRequest, UserPostRequest } from \"../models/resource/user/UserValidationSchemaTypes\";\nimport { User } from './../models/resource/user/UserMongoModel';\n\nexport class UserRoute extends AppRoute {\n    protected path = '/user/:name?'\n\n    async get(req: UserGetRequest , res: Response) {\n        try {\n            const user = await User.findOne({ \n                username: req.params.name\n            });\n            res.json(user);\n        } catch(e) {\n            res.json(e)\n        }\n\n        \n        // if(req.params.name) {\n        //     try {\n        //         const user = await User.findOne({\n        //             username: req.params.name\n        //         }).populate('group').exec();\n                \n        //         if(!user)\n        //             return res.json(appUnknownUserError.get());\n\n        //         return res.json({\n        //             user: user.username,\n        //             group: user.group.name\n        //         });\n        //     } catch(err) {\n        //         return res.json(appMongoError.parse(err).get());\n        //     }\n        // } else {\n        //     let query = User.find();\n        //     if(req.query.country)\n        //         query.where('country', req.query.country);\n        //     if(req.query.age)\n        //         query.where('age').gt(req.query.age.gt).lt(req.query.age.lt);\n\n        //     let userCollection = await (query as IUserDocumentQuery).sortAndPaginate(req)\n        //                                                   .populate('group')\n        //                                                   .exec();\n            \n        //     if(!userCollection)\n        //         return res.json(appUnknownUserError.get());\n            \n        //     return res.json(userCollection.map((user) => {\n        //         return {\n        //             user: user.username,\n        //             group: user.group.name,\n        //             country: user.country,\n        //             age: user.age\n        //         }\n        //     }))\n        // }\n    }\n\n    async post(req: UserPostRequest, res: Response) {\n        res.json({placeholder: true})\n        // let group: IGroup;\n\n        // try {\n        //     group = await Group.findOne({\n        //         name: req.body.group\n        //     });\n        // } catch(err) {\n        //     return res.json(appMongoError.parse(err).get());\n        // }\n\n        // if(!group) \n        //     return res.json(appUnknownGroupError.get())\n\n        // try {\n        //     req.body.group = group;\n        //     await User.create(req.body);   \n        // } catch(err) {\n        //     return res.json(appMongoError.parse(err).get());\n            \n        // }\n\n        // return res.json({\n        //     handshake: 'Hi, ' + req.body.username + ' welcome aboard',\n        //     status: 'ok'\n        // })\n    }\n}\n\nexport let userRoute = new UserRoute();","\nimport * as http from 'http';\nimport { logger } from './core/lib/AppLogger';\nimport { mongo } from './core/lib/AppMongoDriver';\n\nconst port = process.env.PORT || 3000\n\nlet start = async ()  => {\n  let app;\n  try {\n    //Executing async boot operations\n    await mongo.connect();\n\n    //Loading App\n    const App = require('./App');\n    app = App.default;\n\n    //Bootstrapping server\n    http.createServer(app).listen(port, (err) => {\n      if (err) {\n        return logger.error(err);\n      }\n      return logger.info(`server is listening on ${port} ${process.env.NODE_ENV}`)\n    })\n  } catch (err) {\n    logger.error(err);\n  }\n\n  return app;\n}\n\n\n\nexport let server = start();","module.exports = require(\"body-parser\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"joi\");","module.exports = require(\"mongodb\");","module.exports = require(\"winston\");"],"sourceRoot":""}