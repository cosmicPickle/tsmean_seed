{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./server/src/App.ts","webpack:///./server/src/configuration/db/mongo.ts","webpack:///./server/src/configuration/middlewares/middlewaresConfig.ts","webpack:///./server/src/configuration/routes/routesConfig.ts","webpack:///./server/src/core/db/mongo/BaseModel.ts","webpack:///./server/src/core/db/mongo/connection.ts","webpack:///./server/src/core/db/mongo/validators/BaseValidator.ts","webpack:///./server/src/core/errors/AppError.ts","webpack:///./server/src/core/routing/AppRoute.ts","webpack:///./server/src/core/routing/AppRoutesRegistry.ts","webpack:///./server/src/errors/AppInvalidRouteError.ts","webpack:///./server/src/errors/AppMongoError.ts","webpack:///./server/src/errors/AppUnknownUserError.ts","webpack:///./server/src/index.ts","webpack:///./server/src/middlewares/AppLoggerMiddleware.ts","webpack:///./server/src/models/db/mongo/UserModel.ts","webpack:///./server/src/models/db/mongo/validators/UserUsernameValidator.ts","webpack:///./server/src/routes/DefaultRoute.ts","webpack:///./server/src/routes/UserRoute.ts","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"mongoose\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as express from 'express'\nimport AppRoutesRegistry from './core/routing/AppRoutesRegistry';\nimport middlewaresConfig from './configuration/middlewares/middlewaresConfig';\n\nexport class App {\n    public express = express();\n    private \n    constructor () {}\n\n    init() {\n        this.mountGlobalMiddlewares();\n        this.mountRoutes();\n\n        return this;\n    } \n\n    private mountGlobalMiddlewares() {\n        const routeMiddlewares = middlewaresConfig._;\n        routeMiddlewares && this.express.use(routeMiddlewares);\n    }\n    private mountRoutes (): void {\n        const routesRegistry  = new AppRoutesRegistry(express.Router());\n        this.express.use('/', routesRegistry.getRouter());\n    }\n}\n\n\nexport default new App().init().express","export const mongoConfig = {\n    host: 'ds223019.mlab.com:23019/test_seed',\n    user: 'cosmicSeed',\n    password: 'csmsd123'\n}\n\nexport default mongoConfig;","import * as bodyParser from 'body-parser';\nimport { AppMiddlewares } from './../../core/middlewares/AppMiddleware';\nimport { appLoggerMiddleware } from './../../middlewares/AppLoggerMiddleware';\n\nexport const middlewares: AppMiddlewares= {\n    _: [\n        bodyParser.urlencoded({ extended: false }),\n        bodyParser.json(),\n        appLoggerMiddleware.log\n    ],\n    '/user/:name?': {\n        get: [appLoggerMiddleware.log]\n    }\n};\n\nexport default middlewares;\n","import { userRoute } from './../../routes/UserRoute';\nimport { defaultRoute } from './../../routes/DefaultRoute';\nimport AppRoute from './../../core/routing/AppRoute';\n\nexport const routesConfig: AppRoute[] = [\n    defaultRoute,\n    userRoute\n];\n\nexport default routesConfig;","\nimport { Document, Model, Schema, Mongoose } from \"mongoose\";\nimport { mongoose } from './connection';\n\nexport type BaseModelMethods = {\n    [propName: string] : (...args: any[]) => any\n}\n\nexport interface IBaseModel {\n    _name: string,\n    _schema: any,\n    _methods: BaseModelMethods;\n}\nexport class BaseModel<T extends Document> implements IBaseModel {\n\n    _name: string;\n    _schema: any;\n    _methods: BaseModelMethods;\n    protected schema: Schema;\n\n    model(): Model<T> {\n\n        this.schema = new Schema(this._schema);\n        this.schema.methods = this._methods;\n        \n        return mongoose.model<T>(this._name, this.schema);\n    }\n}\n\nexport default BaseModel;","import * as mongoose from \"mongoose\";\nimport { mongoConfig as config} from \"./../../../configuration/db/mongo\";\nimport { resolve } from \"dns\";\n\nconst connect: string = `mongodb://${config.user}:${config.password}@${config.host}`;\n\nmongoose.connect(connect);\n\nexport { mongoose };","export interface IBaseValidator {\n    validator: (v: any) => boolean,\n    message: string\n}\n\nclass BaseValidator implements IBaseValidator{\n    validator(v: any) {\n        return true;\n    }\n    message = 'BaseValidator default message. Should not be seeing this.'\n\n    use() {\n        let v =  <IBaseValidator>{\n            validator: this.validator,\n            message: this.message\n        }\n        return v;\n    }\n}\n\nexport default BaseValidator;","export class AppError {\n    protected code: number\n    protected message: string\n    \n    get() {\n        return { \n            code: this.code,\n            message: this.message\n        }\n    }\n} \n\nexport default AppError;","import { appInvalidRouteError } from './../../errors/AppInvalidRouteError';\nimport { Request, Response, Router } from 'express';\nimport { AppMiddlewareMethod} from './../middlewares/AppMiddleware'\nimport middlewaresConfig from './../../configuration/middlewares/middlewaresConfig';\ninterface AppRouteInterface {\n    get: (req: Request, res: Response) => void\n    post: (req: Request, res: Response) => void\n    put: (req: Request, res: Response) => void\n    delete: (req: Request, res: Response) => void\n    mount: (router: Router) => void\n}\n\nexport class AppRoute implements AppRouteInterface {\n    protected path: string;\n    protected middlewares: AppMiddlewareMethod;\n\n    constructor() { }\n\n    get(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    post(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    put(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    delete(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    mountMiddlewares(router: Router) {\n        const routeMiddlewares = <AppMiddlewareMethod>middlewaresConfig[this.path];\n        if(routeMiddlewares === undefined)\n            return;\n\n        routeMiddlewares._ && router.use(this.path, routeMiddlewares._);\n        routeMiddlewares.get && router.get(this.path, routeMiddlewares.get);\n        routeMiddlewares.post && router.post(this.path, routeMiddlewares.post);\n        routeMiddlewares.put && router.put(this.path, routeMiddlewares.put);\n        routeMiddlewares.delete && router.delete(this.path, routeMiddlewares.delete);\n    }\n    mount(router: Router) {\n        this.mountMiddlewares(router);\n        router.get(this.path, this.get);\n        router.post(this.path, this.post);\n        router.put(this.path, this.put);\n        router.delete(this.path, this.delete);\n    }\n}\n\nexport default AppRoute;","import AppRoute from './AppRoute';\nimport routesConfig from './../../configuration/routes/routesConfig';\n\nexport class AppRoutesRegistry {\n\n    private routes: AppRoute[] = routesConfig;\n\n    constructor(public router: any) {\n        this.routes.forEach((route) => {\n            route.mount(this.router);\n        })\n    }\n\n    getRouter() {\n        return this.router;\n    }\n}\n\nexport default AppRoutesRegistry;","import { AppError } from '../core/errors/AppError';\n\nexport class AppInvalidRouteError extends AppError {\n    \n    protected code = 1000;\n    protected message = \"Invalid Route\";\n}\n\nexport let appInvalidRouteError = new AppInvalidRouteError();","import { AppError } from '../core/errors/AppError';\n\nexport class AppMongoError extends AppError {\n    \n    protected code = 1001;\n    protected message = \"Mongo Error\";\n}\n\nexport let appMongoError = new AppMongoError();","import { AppError } from '../core/errors/AppError';\n\nexport class AppUnknownUserError extends AppError {\n    \n    protected code = 1002;\n    protected message = \"Unknown user\";\n}\n\nexport let appUnknownUserError = new AppUnknownUserError;","import app from './App'\nimport * as http from 'http';\nconst port = process.env.PORT || 3000\n\nhttp.createServer(app).listen(port, (err) => {\n\n  if (err) {\n    return console.log(err);\n  }\n\n  return console.log(`server is listening on ${port} ${process.env.NODE_ENV}`)\n})\n\nexport let server = app;","import { AppMiddlewareFunction } from \"../core/middlewares/AppMiddleware\";\nimport { Request, Response, NextFunction } from \"express\";\n\nexport class AppLoggerMiddleware {\n    log: AppMiddlewareFunction  = (req, res, next)  => {\n        console.log(`Request ${req.method.toUpperCase()} ${req.path}: ${JSON.stringify(req.params)}`);\n        next();\n    }\n}\n\nexport let appLoggerMiddleware = new AppLoggerMiddleware()","import { Document, Model } from \"mongoose\";\nimport { BaseModel } from \"../../../core/db/mongo/BaseModel\";\nimport { userUsernameValidator } from './validators/UserUsernameValidator';\nexport interface IUser extends Document {\n    username: string;\n    password: string;\n    permissions: number;\n    session: string;\n    hasPermission(threshold: number) : boolean;\n}\n\nclass UserModel extends BaseModel<IUser> {\n    _name = 'User';\n    _schema = {\n        username: {\n            type: String,\n            required: true,\n            validate: userUsernameValidator.use()\n        },\n        password: {\n            type: String,\n            required: true\n        },\n        permissions: {\n            type: Number\n        }\n    }\n    _methods = {\n        hasPermission: function(threshold: string): boolean {\n            return this.permissions <= threshold;\n        }\n    }\n\n}\n\nexport const User = ((new UserModel()).model());\nexport default User;","import BaseValidator from \"../../../../core/db/mongo/validators/BaseValidator\";\n\nexport class UserUsernameValidator extends BaseValidator {\n    message = \"error_validation_user_username\"\n    validator(v) {\n    return (/^([a-zA-z])*$/).test(v);\n    }\n}\n\nexport let userUsernameValidator = new UserUsernameValidator();","import AppRoute from './../core/routing/AppRoute';\n\nexport class DefaultRoute extends AppRoute {\n    protected path = '/'\n    \n}\n\nexport let defaultRoute = new DefaultRoute();","import { Request, Response } from 'express';\nimport AppRoute from './../core/routing/AppRoute';\nimport { User } from './../models/db/mongo/UserModel';\nimport { appMongoError } from './../errors/AppMongoError'\nimport { appUnknownUserError } from './../errors/AppUnknownUserError'\nexport class UserRoute extends AppRoute {\n    protected path = '/user/:name?'\n\n    async get(req: Request, res: Response) {\n        try {\n            const user = await User.findOne({\n                username: req.params.name || ''\n            });\n            \n            if(!user)\n                return res.json(appUnknownUserError.get());\n            else {\n                return res.json({\n                    handshake: 'Hi, ' + user.username,\n                    hasPermission: user.hasPermission(1),\n                    status: 'ok'\n                })\n            }\n        } catch(err) {\n            return res.json(appMongoError.get());\n        }\n        \n    }\n}\n\nexport let userRoute = new UserRoute();","module.exports = require(\"body-parser\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"mongoose\");"],"sourceRoot":""}