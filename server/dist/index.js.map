{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./server/src/App.ts","webpack:///./server/src/configuration/db/mongo.ts","webpack:///./server/src/configuration/middlewares/middlewaresConfig.ts","webpack:///./server/src/configuration/routes/routesConfig.ts","webpack:///./server/src/core/errors/AppError.ts","webpack:///./server/src/core/lib/AppLogger.ts","webpack:///./server/src/core/lib/AppMongooseModelManager.ts","webpack:///./server/src/core/lib/Q.ts","webpack:///./server/src/core/models/db/mongo/BaseDocument.ts","webpack:///./server/src/core/models/db/mongo/connection.ts","webpack:///./server/src/core/models/db/mongo/validators/BaseValidator.ts","webpack:///./server/src/core/routing/AppRoute.ts","webpack:///./server/src/core/routing/AppRoutesRegistry.ts","webpack:///./server/src/errors/AppInvalidRouteError.ts","webpack:///./server/src/errors/AppMongoError.ts","webpack:///./server/src/errors/AppUnknownGroupError.ts","webpack:///./server/src/errors/AppUnknownUserError.ts","webpack:///./server/src/index.ts","webpack:///./server/src/middlewares/AppLoggerMiddleware.ts","webpack:///./server/src/models/db/mongo/GroupModel.ts","webpack:///./server/src/models/db/mongo/UserModel.ts","webpack:///./server/src/models/db/mongo/validators/UserUsernameValidator.ts","webpack:///./server/src/routes/DefaultRoute.ts","webpack:///./server/src/routes/GroupRoute.ts","webpack:///./server/src/routes/UserRoute.ts","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"mongoose\"","webpack:///external \"winston\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as express from 'express'\nimport AppRoutesRegistry from './core/routing/AppRoutesRegistry';\nimport middlewaresConfig from './configuration/middlewares/middlewaresConfig';\n\nexport class App {\n    public express = express();\n    private \n    constructor () {}\n\n    init() {\n        this.mountGlobalMiddlewares();\n        this.mountRoutes();\n\n        return this;\n    } \n\n    private mountGlobalMiddlewares() {\n        const routeMiddlewares = middlewaresConfig._;\n        routeMiddlewares && this.express.use(routeMiddlewares);\n    }\n    private mountRoutes (): void {\n        const routesRegistry  = new AppRoutesRegistry(express.Router());\n        this.express.use('/', routesRegistry.getRouter());\n    }\n}\n\n\nexport default new App().init().express","export const mongoConfig = {\n    host: 'ds223019.mlab.com:23019/test_seed',\n    user: 'cosmicSeed',\n    password: 'csmsd123'\n}\n\nexport default mongoConfig;","import * as bodyParser from 'body-parser';\nimport { AppMiddlewares } from './../../core/middlewares/AppMiddleware';\nimport { appLoggerMiddleware } from './../../middlewares/AppLoggerMiddleware';\nimport { appAuthenticateMiddleware } from './../../middlewares/AppAuthenticateMiddleware';\n\nexport const middlewares: AppMiddlewares= {\n    _: [\n        bodyParser.urlencoded({ extended: false }),\n        bodyParser.json()\n    ],\n    '/user/:name?': {\n        get: [\n            appLoggerMiddleware.log, \n            //appAuthenticateMiddleware.check\n        ]\n    }\n};\n\nexport default middlewares;\n","import { userRoute } from './../../routes/UserRoute';\nimport { groupRoute } from './../../routes/GroupRoute';\nimport { defaultRoute } from './../../routes/DefaultRoute';\nimport AppRoute from './../../core/routing/AppRoute';\n\nexport const routesConfig: AppRoute[] = [\n    defaultRoute,\n    userRoute,\n    groupRoute\n];\n\nexport default routesConfig;","export class AppError {\n    protected code: number\n    protected message: string\n    protected payload: object\n    \n    get() {\n        return { \n            code: this.code,\n            message: this.message,\n            payload: this.payload\n        }\n    }\n} \n\nexport default AppError;","\nimport * as winston from 'winston';\n\nclass AppLogger {\n    private __winston;\n    private __transportsDev: winston.TransportInstance[] = [\n        new winston.transports.Console({\n            level: 'debug',\n            colorize: true,\n            handleExceptions: true,\n            humanReadableUnhandledException: true\n        }),\n        // new winston.transports.File({\n        //     filename: './logs/app.log',\n        //     maxsize: 1024*1024,\n        //     level: 'info'\n        // })\n    ];\n    private __transportsProd: winston.TransportInstance[] = [\n        new winston.transports.File({\n            filename: './logs/app.log',\n            maxsize: 1024*1024,\n            level: 'info',\n            handleExceptions: true,\n            humanReadableUnhandledException: true\n        })\n    ];\n\n    private __loggerOptions: winston.LoggerOptions = {\n        exitOnError: false\n    }\n\n    constructor() {\n        \n        if(process.env.NODE_ENV === 'development')\n            this.__loggerOptions.transports = this.__transportsDev;\n        else \n            this.__loggerOptions.transports = this.__transportsProd;\n\n        this.__winston = new winston.Logger(this.__loggerOptions);\n    }\n    /**\n     * logger\n     */\n    public logger() {\n        return this.__winston;\n    }\n}\n\nexport let logger = new AppLogger().logger();","import { mongoose } from './../models/db/mongo/connection'\nimport { IBaseModel } from '../models/db/mongo/BaseDocument';\nimport { logger } from './AppLogger';\nexport class AppMongooseModelManager {\n    private __models: IBaseModel<any>[] = [];\n    private __indexesCreated: Promise<any>[] = [];\n\n    waitIndexesCreated(): Promise<any> {\n        logger.info(\"Waiting for MongoDB Indexes to be created.\");\n\n        const modelNames = mongoose.connection.modelNames();\n    \n        modelNames.forEach((name) => {\n            this.__models.push(mongoose.connection.model(name) as IBaseModel<any>);\n            let model = this.__models[this.__models.length-1];\n            \n            this.__indexesCreated.push(model.waitIndexesCreated())\n        })\n        \n        return Promise.all(this.__indexesCreated).then((value) => {\n            logger.info('MongoDB Indexes Created.');\n            return value;\n        }, (err) => {\n            logger.error(err);\n            return err;\n        });\n    }\n}\n\nexport const appMongooseModelManager = new AppMongooseModelManager();\nexport default appMongooseModelManager;","export type Deferred = {\n    resolve: (...args: any[]) => any,\n    reject: (...args: any[]) => any,\n    promise: Promise<any>\n}\n\nexport class Q {\n\n    defer<T>() : Deferred {\n        let resolve: (...args: any[]) => any;\n        let reject: (...args: any[]) => any;\n\n        let promise: Promise<T> = new Promise<T>(function(){\n            resolve = arguments[0];\n            reject = arguments[1];\n        })\n\n        return {\n            resolve: resolve,\n            reject: reject,\n            promise: promise\n        }\n    }\n}","\nimport { Document, Model, Schema, Mongoose } from \"mongoose\";\nimport { mongoose } from './connection';\nimport { Q, Deferred } from './../../../lib/Q';\n\nexport type BaseDocumentMethods = {\n    [propName: string] : (...args: any[]) => any\n}\n\nexport interface IBaseDocument {\n    name: string,\n    schema: any,\n    methods?: BaseDocumentMethods;\n    statics?: BaseDocumentMethods;\n}\n\nexport interface IBaseModel<T extends Document> extends Model<T> {\n    waitIndexesCreated(): Promise<any>\n}\nexport class BaseDocument<T extends Document> implements IBaseDocument {\n\n    name: string;\n    schema: any;\n    methods: BaseDocumentMethods;\n    statics: BaseDocumentMethods;\n    protected __schema: Schema;\n    private __indexesCreated: Deferred = (new Q).defer();\n\n    private __waitIndexesCreated(): Promise<any> {\n        return this.__indexesCreated.promise;\n    }\n\n    model(): IBaseModel<T> {\n        this.__schema = new Schema(this.schema);\n        this.__schema.methods = this.methods || {};\n        this.__schema.statics = this.statics || {};\n        this.__schema.static('waitIndexesCreated', () => {\n            return this.__waitIndexesCreated();\n        });\n\n        let model = mongoose.model<T>(this.name, this.__schema) as IBaseModel<T>;\n        model.ensureIndexes((err) => {\n            if(err) {\n                this.__indexesCreated.reject(err);\n            } else {\n                this.__indexesCreated.resolve()\n            }\n        });\n        \n        return model;\n    }\n}\n\nexport default BaseDocument;","import * as mongoose from \"mongoose\";\nimport { mongoConfig as config} from \"./../../../../configuration/db/mongo\";\nimport { Mongoose } from \"mongoose\";\n\n\nconst connect: string = `mongodb://${config.user}:${config.password}@${config.host}`;\nconst options = <any>{ autoIndex: false };\nconst db = mongoose.connect(connect, options);\n\nexport { mongoose }","export interface IBaseValidator {\n    validator: (v: any) => boolean,\n    message: string\n}\n\nclass BaseValidator implements IBaseValidator{\n    validator(v: any) {\n        return true;\n    }\n    message = 'BaseValidator default message. Should not be seeing this.'\n\n    use() {\n        let v =  <IBaseValidator>{\n            validator: this.validator,\n            message: this.message\n        }\n        return v;\n    }\n}\n\nexport default BaseValidator;","import { appInvalidRouteError } from './../../errors/AppInvalidRouteError';\nimport { Request, Response, Router } from 'express';\nimport { AppMiddlewareMethod} from './../middlewares/AppMiddleware'\nimport middlewaresConfig from './../../configuration/middlewares/middlewaresConfig';\ninterface AppRouteInterface {\n    get: (req: Request, res: Response) => void\n    post: (req: Request, res: Response) => void\n    put: (req: Request, res: Response) => void\n    delete: (req: Request, res: Response) => void\n    mount: (router: Router) => void\n}\n\nexport class AppRoute implements AppRouteInterface {\n    protected path: string;\n    protected middlewares: AppMiddlewareMethod;\n\n    constructor() { }\n\n    get(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    post(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    put(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    delete(req: Request, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    mountMiddlewares(router: Router) {\n        const routeMiddlewares = <AppMiddlewareMethod>middlewaresConfig[this.path];\n        if(routeMiddlewares === undefined)\n            return;\n\n        routeMiddlewares._ && router.use(this.path, routeMiddlewares._);\n        routeMiddlewares.get && router.get(this.path, routeMiddlewares.get);\n        routeMiddlewares.post && router.post(this.path, routeMiddlewares.post);\n        routeMiddlewares.put && router.put(this.path, routeMiddlewares.put);\n        routeMiddlewares.delete && router.delete(this.path, routeMiddlewares.delete);\n    }\n    mount(router: Router) {\n        this.mountMiddlewares(router);\n        router.get(this.path, this.get);\n        router.post(this.path, this.post);\n        router.put(this.path, this.put);\n        router.delete(this.path, this.delete);\n    }\n}\n\nexport default AppRoute;","import AppRoute from './AppRoute';\nimport routesConfig from './../../configuration/routes/routesConfig';\n\nexport class AppRoutesRegistry {\n\n    private routes: AppRoute[] = routesConfig;\n\n    constructor(public router: any) {\n        this.routes.forEach((route) => {\n            route.mount(this.router);\n        })\n    }\n\n    getRouter() {\n        return this.router;\n    }\n}\n\nexport default AppRoutesRegistry;","import { AppError } from '../core/errors/AppError';\n\nexport class AppInvalidRouteError extends AppError {\n    \n    protected code = 1000;\n    protected message = \"Invalid Route\";\n}\n\nexport let appInvalidRouteError = new AppInvalidRouteError();","import { AppError } from '../core/errors/AppError';\n\ninterface IMongoError extends Error {\n    errors: Object \n}\n\nexport class AppMongoError extends AppError {\n    \n    protected code = 1001;\n    protected message = \"\";\n    \n    parse<T extends Error|IMongoError>(err: T): AppMongoError  {\n        if((<IMongoError>err).errors) {\n            this.message = \"mongoose_validation_error\";\n            this.payload = {\n                invalid: Object.keys((<IMongoError>err).errors).map((key) => {\n                    const e = (<IMongoError>err).errors[key];\n                    return {\n                        kind: e.kind,\n                        path: e.path,\n                        message: e.message,\n                        value: e.value\n                    }\n                })\n            }\n        } else if (err.message.indexOf('duplicate key error') !== -1) {\n            this.message = \"mongoose_duplicate_key_error\"; \n        } else {\n            this.message = \"mongoose_error\"\n\n            if(process.env.NODE_ENV == 'development') {\n                this.payload = {\n                    debug: err.message\n                }\n            }\n        }\n        return this;\n    }\n}\n\nexport let appMongoError = new AppMongoError();","import { AppError } from '../core/errors/AppError';\n\nexport class AppUnknownGroupError extends AppError {\n    \n    protected code = 1002;\n    protected message = \"Unknown group\";\n}\n\nexport let appUnknownGroupError = new AppUnknownGroupError;","import { AppError } from '../core/errors/AppError';\n\nexport class AppUnknownUserError extends AppError {\n    \n    protected code = 1002;\n    protected message = \"Unknown user\";\n}\n\nexport let appUnknownUserError = new AppUnknownUserError;","import app from './App'\nimport * as http from 'http';\nimport { logger } from './core/lib/AppLogger';\nimport { appMongooseModelManager } from './core/lib/AppMongooseModelManager';\nconst port = process.env.PORT || 3000\n\nlet start = async ()  => {\n  try {\n    //Bootstrapping server\n    await appMongooseModelManager.waitIndexesCreated();\n    \n    http.createServer(app).listen(port, (err) => {\n      if (err) {\n        return logger.error(err);\n      }\n      return logger.info(`server is listening on ${port} ${process.env.NODE_ENV}`)\n    })\n  } catch (err) {\n    logger.error(err);\n  }\n\n  return app;\n}\n\n\n\nexport let server = start();","import { AppMiddlewareFunction } from \"../core/middlewares/AppMiddleware\";\nimport { logger } from \"../core/lib/AppLogger\";\n\nexport class AppLoggerMiddleware {\n    log: AppMiddlewareFunction  = (req, res, next)  => {\n        logger.debug(`Request ${req.method.toUpperCase()} ${req.path}: ${JSON.stringify(req.params)}`);\n        next();\n    }\n}\n\nexport let appLoggerMiddleware = new AppLoggerMiddleware()","import { Document, Model } from \"mongoose\";\nimport { BaseDocument } from \"../../../core/models/db/mongo/BaseDocument\";\n\nexport interface IGroup extends Document {\n    name: string;\n    allowedServices: string[];\n    allowedRoutes: string[];\n    guardService(service: string) : boolean;\n    guardRoute(route: string): boolean\n}\n\nclass GroupDocument extends BaseDocument<IGroup> {\n    name = 'Group';\n    schema = {\n        name: {\n            type: String,\n            required: true,\n            unique: true\n        },\n        allowedServices: {\n            type: [String],\n            //TODO: Write validation method:path:arguments (optional {{argument}})\n        },\n        allowedRoutes: {\n            type: [String]\n        }\n    }\n    methods = {\n        guardService: function(service: string): boolean {\n\n            //We have an exact match of service\n            if(this.allowedServices.indexOf(service) >= 0) \n                return true;\n\n            //TODO: Check for parametised service\n\n        },\n\n        guardRoute: function(route: string): boolean {\n            \n            //We have an exact match of route\n            if(this.allowedServices.indexOf(route) >= 0) \n                return true;\n\n            //TODO: Check for parametised route\n\n        }\n    }\n\n}\n\nexport const Group = ((new GroupDocument()).model());\nexport default Group;\n","import { Document, Model, Schema } from \"mongoose\";\nimport { BaseDocument } from \"../../../core/models/db/mongo/BaseDocument\";\nimport { userUsernameValidator } from './validators/UserUsernameValidator';\nimport { IGroup, Group } from './GroupModel';\n\nexport interface IUser extends Document {\n    username: string;\n    password: string;\n    group: IGroup;\n    permissions: number;\n    test(): number;\n}\n\nclass UserDocument extends BaseDocument<IUser> {\n    name = 'User';\n    schema = {\n        username: {\n            type: String,\n            required: true,\n            unique: true,\n            validate: userUsernameValidator.use()\n        },\n        password: {\n            type: String,\n            required: true\n        },\n        group: {\n            type: Schema.Types.ObjectId, \n            ref: 'Group',\n            required: true,\n        },\n        permissions: {\n            type: Number\n        }\n    }\n    methods = {\n        test: () => {\n            return 1;\n        }\n    }\n}\n\nexport const User = ((new UserDocument()).model());\n\nexport default User;","import BaseValidator from \"../../../../core/models/db/mongo/validators/BaseValidator\";\n\nexport class UserUsernameValidator extends BaseValidator {\n    message = \"error_validation_user_username\"\n    validator(v) {\n    return (/^([a-zA-z])*$/).test(v);\n    }\n}\n\nexport let userUsernameValidator = new UserUsernameValidator();","import AppRoute from './../core/routing/AppRoute';\n\nexport class DefaultRoute extends AppRoute {\n    protected path = '/'\n    \n}\n\nexport let defaultRoute = new DefaultRoute();","import { Request, Response } from 'express';\nimport AppRoute from './../core/routing/AppRoute';\nimport { Group } from './../models/db/mongo/GroupModel';\nimport { appMongoError } from './../errors/AppMongoError'\nimport { appUnknownUserError } from './../errors/AppUnknownUserError'\nexport class GroupRoute extends AppRoute {\n    protected path = '/group/'\n\n    async post(req: Request, res: Response) {\n        try {\n            let group = new Group();\n            group.name = 'newbie';\n            group.allowedServices = ['get:/user/{{sub}}'];\n            group.allowedRoutes = ['profile', 'favorites'];\n\n            await group.save();\n            \n            return res.json({\n                success: 'Group Saved',\n                status: 'ok'\n            })\n        } catch(err) {\n            return res.json(appMongoError.get());\n        }\n        \n    }\n}\n\nexport let groupRoute = new GroupRoute();","import { Request, Response } from 'express';\nimport AppRoute from './../core/routing/AppRoute';\nimport { User } from './../models/db/mongo/UserModel';\nimport { appMongoError } from './../errors/AppMongoError';\nimport { appUnknownUserError } from './../errors/AppUnknownUserError';\nimport { appUnknownGroupError } from './../errors/AppUnknownGroupError';\nimport { Group } from '../models/db/mongo/GroupModel';\nimport { mongoose } from '../core/models/db/mongo/connection';\nexport class UserRoute extends AppRoute {\n    protected path = '/user/:name?'\n\n    async get(req: Request, res: Response) {\n        try {\n            const user = await User.findOne({\n                username: req.params.name || ''\n            });\n            \n            if(!user)\n                return res.json(appUnknownUserError.get());\n            else {\n                user.populate('group');\n                return res.json({\n                    handshake: 'Hi, ' + user.username,\n                    group: user.group.name,\n                    status: 'ok'\n                });\n            }\n        } catch(err) {\n            return res.json(appMongoError.parse(err).get());\n        }\n    }\n\n    async post(req: Request, res: Response) {\n        try {\n            const group = await Group.findOne({\n                _id: mongoose.Types.ObjectId(req.body.group)\n            });\n\n            if(!group) \n                return res.json(appUnknownGroupError.get())\n\n            let user = new User();\n\n            user.username = req.body.username;      \n            user.password = req.body.password;\n            user.group = group;\n\n            await user.save();\n\n            return res.json({\n                handshake: 'Hi, ' + user.username + ' welcome aboard',\n                status: 'ok'\n            })\n        } catch(err) {\n            return res.json(appMongoError.parse(err).get());\n        }\n    }\n}\n\nexport let userRoute = new UserRoute();","module.exports = require(\"body-parser\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"mongoose\");","module.exports = require(\"winston\");"],"sourceRoot":""}