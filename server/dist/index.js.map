{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./server/src/App.ts","webpack:///./server/src/configuration/db/mongo.ts","webpack:///./server/src/configuration/errors/errorsConfig.ts","webpack:///./server/src/configuration/middlewares/middlewaresConfig.ts","webpack:///./server/src/configuration/routes/routesConfig.ts","webpack:///./server/src/core/errors/AppAuthorizationError.ts","webpack:///./server/src/core/errors/AppError.ts","webpack:///./server/src/core/errors/AppGeneralError.ts","webpack:///./server/src/core/errors/AppInvalidRouteError.ts","webpack:///./server/src/core/errors/AppMongoError.ts","webpack:///./server/src/core/errors/AppRouteValidationError.ts","webpack:///./server/src/core/errors/AppUnknownGroupError.ts","webpack:///./server/src/core/errors/AppUnknownUserError.ts","webpack:///./server/src/core/lib/AppLogger.ts","webpack:///./server/src/core/lib/AppMongooseModelManager.ts","webpack:///./server/src/core/lib/Q.ts","webpack:///./server/src/core/middlewares/AppLoggerMiddleware.ts","webpack:///./server/src/core/middlewares/validation/request/UserRouteValidatorMiddleware.ts","webpack:///./server/src/core/models/resource/base/BaseDocument.ts","webpack:///./server/src/core/models/resource/base/types.ts","webpack:///./server/src/core/models/resource/base/validation.ts","webpack:///./server/src/core/models/resource/group/GroupDocument.ts","webpack:///./server/src/core/models/resource/user/UserDocument.ts","webpack:///./server/src/core/models/resource/user/UserDocumentSchema.ts","webpack:///./server/src/core/models/resource/user/validation.ts","webpack:///./server/src/core/routing/AppRoute.ts","webpack:///./server/src/core/routing/AppRoutesRegistry.ts","webpack:///./server/src/core/routing/DefaultRoute.ts","webpack:///./server/src/index.ts","webpack:///./server/src/routes/GroupRoute.ts","webpack:///./server/src/routes/UserRoute.ts","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"joi\"","webpack:///external \"mongoose\"","webpack:///external \"winston\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as express from 'express'\nimport AppRoutesRegistry from './core/routing/AppRoutesRegistry';\nimport middlewaresConfig from './configuration/middlewares/middlewaresConfig';\n\nexport class App {\n    public express = express();\n    private \n    constructor () {}\n\n    init() {\n        this.mountGlobalMiddlewares();\n        this.mountRoutes();\n\n        return this;\n    } \n\n    private mountGlobalMiddlewares() {\n        const routeMiddlewares = middlewaresConfig._;\n        routeMiddlewares && this.express.use(routeMiddlewares);\n    }\n    private mountRoutes (): void {\n        const routesRegistry  = new AppRoutesRegistry(express.Router());\n        this.express.use('/', routesRegistry.getRouter());\n    }\n}\n\n\nexport default new App().init().express","import * as mongoose from \"mongoose\";\nimport { Mongoose } from \"mongoose\";\n\nexport const mongoConfig = {\n    host: 'ds223019.mlab.com:23019/test_seed',\n    user: 'cosmicSeed',\n    password: 'csmsd123'\n}\n\nconst connect: string = `mongodb://${mongoConfig.user}:${mongoConfig.password}@${mongoConfig.host}`;\nconst options = <any>{ autoIndex: false };\nconst db = mongoose.connect(connect, options);\n\nexport { mongoose };","import { AppGeneralError } from './../../core/errors/AppGeneralError';\nimport { AppInvalidRouteError } from './../../core/errors/AppInvalidRouteError';\nimport { AppAuthorizationError } from './../../core/errors/AppAuthorizationError';\nimport { AppRouteValidationError } from './../../core/errors/AppRouteValidationError';\nimport { AppMongoError } from './../../core/errors/AppMongoError';\nimport { AppUnknownUserError } from './../../core/errors/AppUnknownUserError';\nimport { AppUnknownGroupError } from './../../core/errors/AppUnknownGroupError';\n\nexport let appGeneralError = new AppGeneralError(1000);\nexport let appInvalidRouteError = new AppInvalidRouteError(1001);\nexport let appAuthorizationError = new AppAuthorizationError(1002);\nexport let appRouteValidationError = new AppRouteValidationError(1003);\nexport let appMongoError = new AppMongoError(1004);\nexport let appUnknownUserError = new AppUnknownUserError(1005);\nexport let appUnknownGroupError = new AppUnknownGroupError(1006);","import * as bodyParser from 'body-parser';\nimport { AppMiddlewares } from './../../core/middlewares/AppMiddleware';\nimport { appLoggerMiddleware } from './../../core/middlewares/AppLoggerMiddleware';\nimport { appAuthenticateMiddleware } from './../../core/middlewares/AppAuthenticateMiddleware';\nimport { userRouteValidatorMiddleware } from './../../core/middlewares/validation/request/UserRouteValidatorMiddleware';\n\nexport const middlewares: AppMiddlewares= {\n    _: [\n        bodyParser.urlencoded({ extended: true }),\n        bodyParser.json({ strict: false}),\n        appLoggerMiddleware.log\n    ],\n    '/user/:name?': {\n        get: [\n            userRouteValidatorMiddleware.get,\n            //appAuthenticateMiddleware.check\n        ],\n        post: [\n            userRouteValidatorMiddleware.post\n        ]\n    }\n};\n\nexport default middlewares;\n","import { userRoute } from './../../routes/UserRoute';\nimport { groupRoute } from './../../routes/GroupRoute';\nimport { defaultRoute } from './../../core/routing/DefaultRoute';\nimport AppRoute from './../../core/routing/AppRoute';\n\nexport const routesConfig: AppRoute<any>[] = [\n    defaultRoute,\n    userRoute,\n    groupRoute\n];\n\nexport default routesConfig;","import { AppError } from './AppError';\n\nexport class AppAuthorizationError extends AppError {\n    protected message = \"not_authorized\";\n}","export class AppError {\n    protected message: string\n    protected payload: any\n\n    constructor(protected code: number) {}\n    \n    get() {\n        return { \n            code: this.code,\n            message: this.message,\n            payload: this.payload\n        }\n    }\n} \n\nexport default AppError;","import { AppError } from './AppError';\n\nexport class AppGeneralError extends AppError {\n    protected message = \"unexpected_error\";\n}","import { AppError } from './AppError';\n\nexport class AppInvalidRouteError extends AppError {\n    \n    protected message = \"invalid_route\";\n}","import { AppError } from './AppError';\n\ninterface IMongoError extends Error {\n    errors: Object \n}\n\nexport class AppMongoError extends AppError {\n    \n    protected code = 1001;\n    protected message = \"\";\n    \n    parse<T extends Error|IMongoError>(err: T): AppMongoError  {\n        if((<IMongoError>err).errors) {\n            this.message = \"mongoose_validation_error\";\n            this.payload = {\n                invalid: Object.keys((<IMongoError>err).errors).map((key) => {\n                    const e = (<IMongoError>err).errors[key];\n                    return {\n                        kind: e.kind,\n                        path: e.path,\n                        message: e.message,\n                        value: e.value\n                    }\n                })\n            }\n        } else if (err.message.indexOf('duplicate key error') !== -1) {\n            this.message = \"mongoose_duplicate_key_error\"; \n        } else {\n            this.message = \"mongoose_error\"\n\n            if(process.env.NODE_ENV == 'development') {\n                this.payload = {\n                    debug: err.message\n                }\n            }\n        }\n        return this;\n    }\n}","import { AppError } from \"./AppError\";\nimport * as Joi from 'joi';\nexport class AppRouteValidationError extends AppError {\n    protected message = \"invalid_route_params\"\n\n    parse(error: Joi.ValidationError): AppRouteValidationError {\n\n        this.payload = {\n            errors: [],\n            invalid: error._object\n        }\n\n        error.details.forEach((e) => {\n            (this.payload as any).errors.push({\n                path: e.path,\n                type: e.type,\n                context: e.context\n            })\n        })\n        return this;\n    }\n}","import { AppError } from './AppError';\n\nexport class AppUnknownGroupError extends AppError {\n    \n    protected code = 1005;\n    protected message = \"Unknown group\";\n}","import { AppError } from './AppError';\n\nexport class AppUnknownUserError extends AppError {\n    protected message = \"unknown_user\";\n}\n\n","\nimport * as winston from 'winston';\n\nexport class AppLogger {\n    private __winston;\n    private __transportsDev: winston.TransportInstance[] = [\n        new winston.transports.Console({\n            level: 'debug',\n            colorize: true,\n            handleExceptions: true,\n            humanReadableUnhandledException: true\n        }),\n        new winston.transports.File({\n            filename: './logs/app.log',\n            maxsize: 1024*1024,\n            level: 'error'\n        })\n    ];\n    private __transportsProd: winston.TransportInstance[] = [\n        new winston.transports.File({\n            filename: './logs/app.log',\n            maxsize: 1024*1024,\n            level: 'info',\n            handleExceptions: true,\n            humanReadableUnhandledException: true\n        })\n    ];\n\n    private __loggerOptions: winston.LoggerOptions = {\n        exitOnError: false\n    }\n\n    constructor() {\n        \n        if(process.env.NODE_ENV === 'development')\n            this.__loggerOptions.transports = this.__transportsDev;\n        else \n            this.__loggerOptions.transports = this.__transportsProd;\n\n        this.__winston = new winston.Logger(this.__loggerOptions);\n    }\n    /**\n     * logger\n     */\n    public logger() {\n        return this.__winston;\n    }\n}\n\nexport let logger = new AppLogger().logger();","import { mongoose } from './../../configuration/db/mongo'\nimport { mongo } from './../models/resource/base/types';\nimport { logger } from './AppLogger';\nexport class AppMongooseModelManager {\n    private __models: mongo.IBaseModel<any>[] = [];\n    private __indexesCreated: Promise<any>[] = [];\n\n    waitIndexesCreated(): Promise<any> {\n        logger.info(\"Waiting for MongoDB Indexes to be created.\");\n\n        const modelNames = mongoose.connection.modelNames();\n    \n        modelNames.forEach((name) => {\n            this.__models.push(mongoose.connection.model(name) as mongo.IBaseModel<any>);\n            let model = this.__models[this.__models.length-1];\n            \n            this.__indexesCreated.push(model.waitIndexesCreated())\n        })\n        \n        return Promise.all(this.__indexesCreated).then((value) => {\n            logger.info('MongoDB Indexes Created.');\n            return value;\n        }, (err) => {\n            logger.error(err);\n            return err;\n        });\n    }\n}\n\nexport const appMongooseModelManager = new AppMongooseModelManager();\nexport default appMongooseModelManager;","export type Deferred = {\n    resolve: (...args: any[]) => any,\n    reject: (...args: any[]) => any,\n    promise: Promise<any>\n}\n\nexport class Q {\n\n    defer<T>() : Deferred {\n        let resolve: (...args: any[]) => any;\n        let reject: (...args: any[]) => any;\n\n        let promise: Promise<T> = new Promise<T>(function(){\n            resolve = arguments[0];\n            reject = arguments[1];\n        })\n\n        return {\n            resolve: resolve,\n            reject: reject,\n            promise: promise\n        }\n    }\n}","import { AppMiddlewareFunction } from \"../middlewares/AppMiddleware\";\nimport { logger } from \"../lib/AppLogger\";\n\nexport class AppLoggerMiddleware {\n    log: AppMiddlewareFunction  = (req, res, next)  => {\n        logger.debug(`Request ${req.method.toUpperCase()} ${req.path}: ${JSON.stringify(req.params)}`);\n        next();\n    }\n}\n\nexport let appLoggerMiddleware = new AppLoggerMiddleware()","import * as Joi from 'joi';\nimport { Request, Response, NextFunction } from 'express';\nimport { AppMiddlewareFunction } from './../../AppMiddleware';\nimport { userGetQuerySchema, userPostBodySchema } from './../../../models/resource/user/validation';\nimport { appRouteValidationError } from './../../../../configuration/errors/errorsConfig';\n\nexport class UserRouteValidatorMiddleware {\n    get: AppMiddlewareFunction = async (req: Request, res: Response, next: NextFunction) => { \n        try {\n            await userGetQuerySchema.validate(req.query);\n            next();\n        } catch(e) {\n            res.json(appRouteValidationError.parse(e as Joi.ValidationError).get());\n        }\n    }\n    post: AppMiddlewareFunction = async (req: Request, res: Response, next: NextFunction) => { \n        try {\n            await userPostBodySchema.validate(req.body);\n            next();\n        } catch(e) {\n            res.json(appRouteValidationError.parse(e as Joi.ValidationError).get())\n        }\n        \n    }\n}\n\nexport let userRouteValidatorMiddleware = new UserRouteValidatorMiddleware();","\nimport * as types from './types';\nimport { Document, Model, Schema, Mongoose, DocumentQuery } from \"mongoose\";\nimport { mongoose } from './../../../../configuration/db/mongo';\nimport { Q, Deferred } from './../../../lib/Q';\nimport { logger } from \"../../../lib/AppLogger\";\n\nexport class BaseDocument<\n    T extends Document, \n    U extends types.mongo.IBaseModel<T> = types.mongo.IBaseModel<T>, \n    V extends types.mongo.IBaseDocumentQuery<T> = types.mongo.IBaseDocumentQuery<T>\n> implements types.mongo.IBaseDocument {\n\n    name: string;\n    schema: any;\n    config: types.mongo.DocumentConfig = {\n        resultsPerPage: 3\n    };\n    methods: types.mongo.BaseDocumentMethods;\n    statics: types.mongo.BaseDocumentMethods;\n    query: types.mongo.BaseDocumentMethods;\n    private __methods:types.mongo.BaseDocumentMethods = {};\n    private __statics:types.mongo.BaseDocumentMethods = {\n        waitIndexesCreated: (): Promise<any> => {\n            return this.__indexesCreated.promise;\n        }\n    };\n    private __query: types.mongo.BaseDocumentMethods = {\n        sortAndPaginate: (() => {\n            const config = this.config;\n\n            return function<R extends types.io.AppBaseRequest>(req: R): V {\n                const q = (this as V);\n\n                if(req.query.sort) {\n                    q.sort(req.query.sort);\n                }\n\n                if(config.resultsPerPage > 0) {\n                    const p = req.query.page >= 1 ? req.query.page : 1;\n                    const skip = (p - 1)*config.resultsPerPage;\n                    \n                    q.skip(skip);\n                    q.limit(config.resultsPerPage);\n                }\n                return q;\n            }\n            \n        })()\n    };\n\n    private __schema: types.mongo.BaseSchema;\n    private __indexesCreated: Deferred = (new Q).defer();\n    model(): U {\n        const _this = this;\n        this.__schema = new types.mongo.BaseSchema(this.schema);\n        this.__schema.methods = this.methods ? Object.assign({}, this.methods, this.__methods) : Object.assign({}, this.__methods);\n        this.__schema.statics = this.statics ? Object.assign({}, this.statics, this.__statics) : Object.assign({}, this.__statics);\n        this.__schema.query = this.query ? Object.assign({}, this.query, this.__query) : Object.assign({}, this.__query);\n\n        logger.debug(`creating model ${this.name}`);\n        let model = mongoose.model<T>(this.name, this.__schema) as U;\n        model.ensureIndexes((err) => {\n            if(err) {\n                this.__indexesCreated.reject(err);\n            } else {\n                this.__indexesCreated.resolve();\n            }\n        });\n        \n        return model;\n    }\n}\n\nexport default BaseDocument;","import { Model, Document, DocumentQuery, Schema } from \"mongoose\";\nimport { Request } from \"express\";\n\n/**\n * Mongodb Types\n */\nexport namespace mongo {\n    export type BaseDocumentMethods = {\n        [propName: string] : (...args: any[]) => any\n    }\n    \n    export type DocumentConfig = {\n        resultsPerPage: number;\n    }\n    \n    export interface IBaseDocument {\n        name: string;\n        schema: any;\n        methods?: BaseDocumentMethods;\n        statics?: BaseDocumentMethods;\n    }\n    \n    export interface IBaseModel<T extends Document> extends Model<T> {\n        waitIndexesCreated(): Promise<any>;\n    }\n    \n    export interface IBaseDocumentQuery<DocType extends Document> extends DocumentQuery<DocType[], DocType> {\n        sortAndPaginate<R extends io.AppBaseRequest>(req: R): this;\n    }\n    \n    export class BaseSchema extends Schema {\n        query: BaseDocumentMethods;\n    }\n}\n\n\n/**\n * IO Types\n */\n\nexport namespace io {\n    export interface AppBaseQuery {\n        token?: string;\n        sort?: string;\n        order?: -1|1;\n        page?: number;\n    }\n\n    export namespace SchemaHelpers {\n        export interface Range {\n            lt: number,\n            gt: number\n        }\n        export interface Lt {\n            lt: number;\n        }\n        export interface Gt {\n            gt: number;\n        }\n        export interface In {\n            in: string[]\n        }\n    }\n    \n    export interface AppBaseBody {\n        token?: string;\n    }\n    \n    export interface AppBaseRequest<T extends AppBaseQuery = AppBaseQuery, Q extends AppBaseBody = AppBaseBody> extends Request {\n        query: T;\n        body: Q;\n    }\n}","\nimport * as Joi from 'joi';\n\nexport class BaseSchema {\n    validate(obj): Promise<Boolean> {\n        return new Promise<Boolean>((resolve, reject) => {\n            let _schema = Joi.object();\n            let keys: Joi.SchemaMap = {};\n            \n            Object.keys(this).forEach((k) => {\n                return keys[k] = this[k];\n            })\n\n\n            if(!keys) {\n                resolve(true);\n                return;\n            }\n\n            try {\n                _schema = (_schema as Joi.ObjectSchema).keys(keys);\n\n                const { error, value } = Joi.validate(obj, _schema);\n                if(error)\n                    throw error;\n\n                resolve(true);\n            } catch (e) {\n                throw e;\n            }\n        })\n    }\n}\n\nexport namespace SchemaHelpers {\n    \n    export const lt = {\n        lt: Joi.number().integer().min(Joi.ref('gt'))\n    }\n\n    export const gt = {\n        gt: Joi.number().integer()\n    }\n\n    export const range = {\n        gt: Joi.number().integer(),\n        lt: Joi.number().integer().min(Joi.ref('gt'))\n    }\n\n    export const $in = {\n        in: Joi.array()\n    }\n}\n\nexport class AppBaseQuerySchema extends BaseSchema {\n    sort: Joi.StringSchema = Joi.string().regex(/^(\\-|[a-zA-Z0-9\\_])/);\n    page: Joi.NumberSchema = Joi.number().min(0);\n}\n\nexport class AppBaseBodySchema extends BaseSchema {\n    \n}","import { Document, Model } from \"mongoose\";\nimport { BaseDocument } from './../base/BaseDocument'\nimport * as types from './types';\nimport * as base from '../base/types';\nclass GroupDocument extends BaseDocument<types.IGroup> {\n    name = 'Group';\n    schema = {\n        name: {\n            type: String,\n            required: true,\n            unique: true\n        },\n        allowedServices: {\n            type: [{\n                method: String,\n                path: String\n            }]\n        },\n        allowedRoutes: {\n            type: [String]\n        }\n    }\n    methods = { }\n\n}\n\nexport const Group = ((new GroupDocument()).model());\nexport default Group;\n","import * as base from './../base/types';\nimport * as types from './types';\n\nimport { BaseDocument } from './../base/BaseDocument';\nimport { Document, Model, Schema } from \"mongoose\";\nimport { UserDocumentSchema } from './UserDocumentSchema';\n\nclass UserDocument extends BaseDocument<\n    types.IUser, \n    base.mongo.IBaseModel<types.IUser>, \n    types.IUserDocumentQuery\n> {\n    name = 'User';\n    schema = UserDocumentSchema;\n    methods = {};\n    statics = {};\n    query = {\n        filter<T extends base.io.AppBaseRequest>(country) {\n            return (this as types.IUserDocumentQuery).find({\n                country: country\n            })\n        }\n    }\n}\n\nexport const User = ((new UserDocument()).model());\n\nexport default User;","import { mongoose } from './../../../../configuration/db/mongo';\nimport { userPostBodySchema } from './validation';\n\nexport const UserDocumentSchema = {\n    username: {\n        type: String,\n        required: true,\n        unique: true,\n        validate: {\n            isAsync: true,\n            validator: function(val, cb)  {\n                const {error, value} = userPostBodySchema.username.validate(val);\n                cb(!error, JSON.stringify(error))\n            },\n            message: null\n        }\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    age: {\n        type: Number,\n        required: true\n    },\n    country: {\n        type: String,\n        required: true\n    },\n    group: {\n        type: mongoose.Schema.Types.ObjectId, \n        ref: 'Group',\n        required: true,\n    },\n    allowedServices: {\n        type: [{\n            method: String,\n            path: String\n        }]\n    },\n    allowedRoutes: {\n        type: [String]\n    }\n}","import { AppBaseQuerySchema, SchemaHelpers, AppBaseBodySchema } from './../base/validation';\nimport * as Joi from 'joi';\n\nexport class UserGetQuerySchema extends AppBaseQuerySchema {\n    sort = Joi.string().valid('age', '-age');\n    country = Joi.string().min(2).max(2);\n    age = Joi.object().keys(SchemaHelpers.range)\n}\n\nexport class UserPostBodySchema extends AppBaseBodySchema {\n    username = Joi.string().required().min(2);\n    password = Joi.string().required();\n    age = Joi.number().required();\n    country = Joi.string().min(2).max(2).required();\n    group = Joi.string().required();\n    allowedServices = Joi.object().keys({\n        method: Joi.string().required(),\n        path: Joi.string().required()\n    })\n    allowedRoutes = Joi.array().items(Joi.string().required())\n}\n\nexport const userGetQuerySchema = new UserGetQuerySchema();\nexport const userPostBodySchema = new UserPostBodySchema();","import { appInvalidRouteError } from './../../configuration/errors/errorsConfig';\nimport { Request, Response, Router } from 'express';\nimport { AppMiddlewareMethod} from './../middlewares/AppMiddleware'\nimport middlewaresConfig from './../../configuration/middlewares/middlewaresConfig';\nimport { io } from '../models/resource/base/types';\ninterface AppRouteInterface<T extends io.AppBaseRequest<any, any>> {\n    get: (req: T, res: Response) => void\n    post: (req: T, res: Response) => void\n    put: (req: T, res: Response) => void\n    delete: (req: T, res: Response) => void\n    mount: (router: Router) => void\n}\n\nexport class AppRoute<T extends io.AppBaseRequest = io.AppBaseRequest> implements AppRouteInterface<T> {\n    protected path: string;\n    protected middlewares: AppMiddlewareMethod;\n\n    constructor() { }\n\n    get(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    post(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    put(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    delete(req: T, res: Response) {\n        res.json(appInvalidRouteError.get());\n    }\n\n    mountMiddlewares(router: Router) {\n        const routeMiddlewares = <AppMiddlewareMethod>middlewaresConfig[this.path];\n        if(routeMiddlewares === undefined)\n            return;\n\n        routeMiddlewares._ && router.use(this.path, routeMiddlewares._);\n        routeMiddlewares.get && router.get(this.path, routeMiddlewares.get);\n        routeMiddlewares.post && router.post(this.path, routeMiddlewares.post);\n        routeMiddlewares.put && router.put(this.path, routeMiddlewares.put);\n        routeMiddlewares.delete && router.delete(this.path, routeMiddlewares.delete);\n    }\n    mount(router: Router) {\n        this.mountMiddlewares(router);\n        router.get(this.path, this.get);\n        router.post(this.path, this.post);\n        router.put(this.path, this.put);\n        router.delete(this.path, this.delete);\n    }\n}\n\nexport default AppRoute;","import AppRoute from './AppRoute';\nimport routesConfig from './../../configuration/routes/routesConfig';\n\nexport class AppRoutesRegistry {\n\n    private routes: AppRoute<any>[] = routesConfig;\n\n    constructor(public router: any) {\n        this.routes.forEach((route) => {\n            route.mount(this.router);\n        })\n    }\n\n    getRouter() {\n        return this.router;\n    }\n}\n\nexport default AppRoutesRegistry;","import AppRoute from './AppRoute';\nimport { io } from '../models/resource/base/types';\n\nexport class DefaultRoute extends AppRoute<io.AppBaseRequest> {\n    protected path = '/'\n}\n\nexport let defaultRoute = new DefaultRoute();","import app from './App'\nimport * as http from 'http';\nimport { logger } from './core/lib/AppLogger';\nimport { appMongooseModelManager } from './core/lib/AppMongooseModelManager';\nconst port = process.env.PORT || 3000\n\nlet start = async ()  => {\n  try {\n    //Bootstrapping server\n    await appMongooseModelManager.waitIndexesCreated();\n    \n    http.createServer(app).listen(port, (err) => {\n      if (err) {\n        return logger.error(err);\n      }\n      return logger.info(`server is listening on ${port} ${process.env.NODE_ENV}`)\n    })\n  } catch (err) {\n    logger.error(err);\n  }\n\n  return app;\n}\n\n\n\nexport let server = start();","import { Request, Response } from 'express';\nimport AppRoute from './../core/routing/AppRoute';\nimport { appMongoError, appUnknownUserError } from './../configuration/errors/errorsConfig';\nimport { logger } from '../core/lib/AppLogger';\nimport { Group } from '../core/models/resource/group/GroupDocument';\n\n\nexport class GroupRoute extends AppRoute {\n    protected path = '/group/:id?'\n\n    async post(req: Request, res: Response) {\n        try {\n            req.body\n            let group = new Group();\n            group.name = req.body.name;\n            group.allowedRoutes = req.body.allowedRoutes;\n            group.allowedServices = req.body.allowedServices;\n            \n            await group.save();\n            \n            return res.json({\n                success: 'Group Saved',\n                status: 'ok'\n            })\n        } catch(err) {\n            return res.json(appMongoError.parse(err).get());\n        }\n        \n    }\n}\n\nexport let groupRoute = new GroupRoute();","import { Response, Request } from \"express\";\n\nimport { AppRoute } from \"../core/routing/AppRoute\";\nimport { appUnknownUserError, appMongoError, appUnknownGroupError } from \"../configuration/errors/errorsConfig\";\n\nimport { UserGetRequest, IUserDocumentQuery } from \"../core/models/resource/user/types\";\nimport { User } from \"../core/models/resource/user/UserDocument\";\nimport { Group } from \"../core/models/resource/group/GroupDocument\";\n\n\n\nexport class UserRoute extends AppRoute<UserGetRequest> {\n    protected path = '/user/:name?'\n\n    async get(req: UserGetRequest, res: Response) {\n        if(req.params.name) {\n            try {\n                const user = await User.findOne({\n                    username: req.params.name\n                }).populate('group').exec();\n                \n                if(!user)\n                    return res.json(appUnknownUserError.get());\n\n                return res.json({\n                    user: user.username,\n                    group: user.group.name\n                });\n            } catch(err) {\n                return res.json(appMongoError.parse(err).get());\n            }\n        } else {\n            let query = User.find();\n            if(req.query.country)\n                query.where('country', req.query.country);\n            if(req.query.age)\n                query.where('age').gt(req.query.age.gt).lt(req.query.age.lt);\n\n            let userCollection = await (query as IUserDocumentQuery).sortAndPaginate(req)\n                                                          .populate('group')\n                                                          .exec();\n            \n            if(!userCollection)\n                return res.json(appUnknownUserError.get());\n            \n            return res.json(userCollection.map((user) => {\n                return {\n                    user: user.username,\n                    group: user.group.name,\n                    country: user.country,\n                    age: user.age\n                }\n            }))\n        }\n    }\n\n    async post(req: Request, res: Response) {\n        try {\n            const group = await Group.findOne({\n                name: req.body.group\n            });\n\n            if(!group) \n                return res.json(appUnknownGroupError.get())\n            req.body.group = group;\n\n            await User.create(req.body);\n\n            return res.json({\n                handshake: 'Hi, ' + req.body.username + ' welcome aboard',\n                status: 'ok'\n            })\n        } catch(err) {\n            return res.json(appMongoError.parse(err).get());\n        }\n    }\n}\n\nexport let userRoute = new UserRoute();","module.exports = require(\"body-parser\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"joi\");","module.exports = require(\"mongoose\");","module.exports = require(\"winston\");"],"sourceRoot":""}